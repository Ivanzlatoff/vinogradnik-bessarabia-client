{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _utils = require(\"./utils\");\nvar utils = _interopRequireWildcard(_utils);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Simple module to localize the React interface using the same syntax\n * used in the ReactNativeLocalization module\n * (https://github.com/stefalda/ReactNativeLocalization)\n *\n * Originally developed by Stefano Falda (stefano.falda@gmail.com)\n *\n * It uses a call to the Navigator/Browser object to get the current interface language,\n * then display the correct language strings or the default language (the first\n * one if a match is not found).\n *\n * How to use:\n * Check the instructions at:\n * https://github.com/stefalda/localized-strings\n */\n\nvar placeholderReplaceRegex = /(\\{[\\d|\\w]+\\})/;\nvar placeholderReferenceRegex = /(\\$ref\\{[\\w|.]+\\})/;\nvar LocalizedStrings = function () {\n  /**\n   * Constructor used to provide the strings objects in various language and the optional callback to get\n   * the interface language\n   * @param {*} props - the strings object\n   * @param {Function} options.customLanguageInterface - the optional method to use to get the InterfaceLanguage\n   * @param {Boolean} options.pseudo - convert all strings to pseudo, helpful when implementing\n   * @param {Boolean} options.pseudoMultipleLanguages - add 40% to pseudo, helps with translations in the future\n   * @param {Boolean} options.logsEnabled - Enable/Disable console.log outputs (default=true)\n   */\n  function LocalizedStrings(props, options) {\n    _classCallCheck(this, LocalizedStrings);\n\n    // Compatibility fix with previous version\n    if (typeof options === \"function\") {\n      /* eslint-disable no-param-reassign */\n      options = {\n        customLanguageInterface: options\n      };\n      /* eslint-enable */\n    }\n\n    this._opts = _extends({}, {\n      customLanguageInterface: utils.getInterfaceLanguage,\n      pseudo: false,\n      pseudoMultipleLanguages: false,\n      logsEnabled: true\n    }, options);\n    this._interfaceLanguage = this._opts.customLanguageInterface();\n    this._language = this._interfaceLanguage;\n    this.setContent(props);\n  }\n\n  /**\n   * Set the strings objects based on the parameter passed in the constructor\n   * @param {*} props\n   */\n\n  _createClass(LocalizedStrings, [{\n    key: \"setContent\",\n    value: function setContent(props) {\n      var _this = this;\n      var _Object$keys = Object.keys(props),\n        _Object$keys2 = _slicedToArray(_Object$keys, 1),\n        defaultLang = _Object$keys2[0];\n      this._defaultLanguage = defaultLang;\n      this._defaultLanguageFirstLevelKeys = [];\n      // Store locally the passed strings\n      this._props = props;\n      utils.validateTranslationKeys(Object.keys(props[this._defaultLanguage]));\n      // Store first level keys (for identifying missing translations)\n      Object.keys(this._props[this._defaultLanguage]).forEach(function (key) {\n        if (typeof _this._props[_this._defaultLanguage][key] === \"string\") {\n          _this._defaultLanguageFirstLevelKeys.push(key);\n        }\n      });\n      // Set language to its default value (the interface)\n      this.setLanguage(this._interfaceLanguage);\n      // Developermode with pseudo\n      if (this._opts.pseudo) {\n        this._pseudoAllValues(this._props);\n      }\n    }\n\n    /**\n     * Replace all strings to pseudo value\n     * @param {Object} obj - Loopable object\n     */\n  }, {\n    key: \"_pseudoAllValues\",\n    value: function _pseudoAllValues(obj) {\n      var _this2 = this;\n      Object.keys(obj).forEach(function (property) {\n        if (_typeof(obj[property]) === \"object\") {\n          _this2._pseudoAllValues(obj[property]);\n        } else if (typeof obj[property] === \"string\") {\n          if (obj[property].indexOf(\"[\") === 0 && obj[property].lastIndexOf(\"]\") === obj[property].length - 1) {\n            // already psuedo fixed\n            return;\n          }\n          // @TODO must be a way to get regex to find all replaceble strings except our replacement variables\n          var strArr = obj[property].split(\" \");\n          for (var i = 0; i < strArr.length; i += 1) {\n            if (strArr[i].match(placeholderReplaceRegex)) {\n              // we want to keep this string, includes specials\n            } else if (strArr[i].match(placeholderReferenceRegex)) {\n              // we want to keep this string, includes specials\n            } else {\n              var len = strArr[i].length;\n              if (_this2._opts.pseudoMultipleLanguages) {\n                len = parseInt(len * 1.4, 10); // add length with 40%\n              }\n\n              strArr[i] = utils.randomPseudo(len);\n            }\n          }\n          obj[property] = \"[\" + strArr.join(\" \") + \"]\"; // eslint-disable-line no-param-reassign\n        }\n      });\n    }\n\n    /**\n     * Can be used from ouside the class to force a particular language\n     * indipendently from the interface one\n     * @param {*} language\n     */\n  }, {\n    key: \"setLanguage\",\n    value: function setLanguage(language) {\n      var _this3 = this;\n\n      // Check if exists a translation for the current language or if the default\n      // should be used\n      var bestLanguage = utils.getBestMatchingLanguage(language, this._props);\n      var defaultLanguage = Object.keys(this._props)[0];\n      this._language = bestLanguage;\n      // Associate the language object to the this object\n      if (this._props[bestLanguage]) {\n        // delete default propery values to identify missing translations\n        for (var i = 0; i < this._defaultLanguageFirstLevelKeys.length; i += 1) {\n          delete this[this._defaultLanguageFirstLevelKeys[i]];\n        }\n        var localizedStrings = _extends({}, this._props[this._language]);\n        Object.keys(localizedStrings).forEach(function (key) {\n          _this3[key] = localizedStrings[key];\n        });\n        // Now add any string missing from the translation but existing in the default language\n        if (defaultLanguage !== this._language) {\n          localizedStrings = this._props[defaultLanguage];\n          this._fallbackValues(localizedStrings, this);\n        }\n      }\n    }\n\n    /**\n     * Load fallback values for missing translations\n     * @param {*} defaultStrings\n     * @param {*} strings\n     */\n  }, {\n    key: \"_fallbackValues\",\n    value: function _fallbackValues(defaultStrings, strings) {\n      var _this4 = this;\n      Object.keys(defaultStrings).forEach(function (key) {\n        if (Object.prototype.hasOwnProperty.call(defaultStrings, key) && !strings[key] && strings[key] !== \"\") {\n          strings[key] = defaultStrings[key]; // eslint-disable-line no-param-reassign\n          if (_this4._opts.logsEnabled) {\n            console.log(\"\\uD83D\\uDEA7 \\uD83D\\uDC77 key '\" + key + \"' not found in localizedStrings for language \" + _this4._language + \" \\uD83D\\uDEA7\");\n          }\n        } else if (typeof strings[key] !== \"string\") {\n          // It's an object\n          _this4._fallbackValues(defaultStrings[key], strings[key]);\n        }\n      });\n    }\n\n    /**\n     * The current language displayed (could differ from the interface language\n     * if it has been forced manually and a matching translation has been found)\n     */\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      return this._language;\n    }\n\n    /**\n     * The current interface language (could differ from the language displayed)\n     */\n  }, {\n    key: \"getInterfaceLanguage\",\n    value: function getInterfaceLanguage() {\n      return this._interfaceLanguage;\n    }\n\n    /**\n     * Return an array containing the available languages passed as props in the constructor\n     */\n  }, {\n    key: \"getAvailableLanguages\",\n    value: function getAvailableLanguages() {\n      var _this5 = this;\n      if (!this._availableLanguages) {\n        this._availableLanguages = [];\n        Object.keys(this._props).forEach(function (key) {\n          _this5._availableLanguages.push(key);\n        });\n      }\n      return this._availableLanguages;\n    }\n\n    // Format the passed string replacing the numbered or tokenized placeholders\n    // eg. 1: I'd like some {0} and {1}, or just {0}\n    // eg. 2: I'd like some {bread} and {butter}, or just {bread}\n    // eg. 3: I'd like some $ref{bread} and $ref{butter}, or just $ref{bread}\n    // Use example:\n    // eg. 1: strings.formatString(strings.question, strings.bread, strings.butter)\n    // eg. 2: strings.formatString(strings.question, { bread: strings.bread, butter: strings.butter })\n    // eg. 3: strings.formatString(strings.question)\n  }, {\n    key: \"formatString\",\n    value: function formatString(str) {\n      var _this6 = this;\n      for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        valuesForPlaceholders[_key - 1] = arguments[_key];\n      }\n      var input = str || \"\";\n      if (typeof input === \"string\") {\n        input = this.getString(str, null, true) || input;\n      }\n      var ref = input.split(placeholderReferenceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReferenceRegex)) {\n          var matchedKey = textPart.slice(5, -1);\n          var referenceValue = _this6.getString(matchedKey);\n          if (referenceValue) return referenceValue;\n          if (_this6._opts.logsEnabled) {\n            console.log(\"No Localization ref found for '\" + textPart + \"' in string '\" + str + \"'\");\n          }\n          // lets print it another way so next replacer doesn't find it\n          return \"$ref(id:\" + matchedKey + \")\";\n        }\n        return textPart;\n      }).join(\"\");\n      return ref.split(placeholderReplaceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReplaceRegex)) {\n          var matchedKey = textPart.slice(1, -1);\n          var valueForPlaceholder = valuesForPlaceholders[matchedKey];\n          // If no value found, check if working with an object instead\n          if (valueForPlaceholder === undefined) {\n            var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];\n            if (valueFromObjectPlaceholder !== undefined) {\n              valueForPlaceholder = valueFromObjectPlaceholder;\n            } else {\n              // If value still isn't found, then it must have been undefined/null\n              return valueForPlaceholder;\n            }\n          }\n          return valueForPlaceholder;\n        }\n        return textPart;\n      }).join(\"\");\n    }\n\n    // Return a string with the passed key in a different language or defalt if not set\n    // We allow deep . notation for finding strings\n  }, {\n    key: \"getString\",\n    value: function getString(key, language) {\n      var omitWarning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      try {\n        var current = this._props[language || this._language];\n        var paths = key.split(\".\");\n        for (var i = 0; i < paths.length; i += 1) {\n          if (current[paths[i]] === undefined) {\n            throw Error(paths[i]);\n          }\n          current = current[paths[i]];\n        }\n        return current;\n      } catch (ex) {\n        if (!omitWarning && this._opts.logsEnabled) {\n          console.log(\"No localization found for key '\" + key + \"' and language '\" + language + \"', failed on \" + ex.message);\n        }\n      }\n      return null;\n    }\n\n    /**\n     * The current props (locale object)\n     */\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this._props;\n    }\n  }]);\n  return LocalizedStrings;\n}();\nexports.default = LocalizedStrings;","map":{"version":3,"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","length","err","Array","isArray","TypeError","_extends","assign","target","arguments","source","key","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_utils","require","utils","_interopRequireWildcard","__esModule","newObj","default","_classCallCheck","instance","placeholderReplaceRegex","placeholderReferenceRegex","LocalizedStrings","options","customLanguageInterface","_opts","getInterfaceLanguage","pseudo","pseudoMultipleLanguages","logsEnabled","_interfaceLanguage","_language","setContent","_this","_Object$keys","keys","_Object$keys2","defaultLang","_defaultLanguage","_defaultLanguageFirstLevelKeys","_props","validateTranslationKeys","forEach","setLanguage","_pseudoAllValues","_this2","property","indexOf","lastIndexOf","strArr","split","match","len","parseInt","randomPseudo","join","language","_this3","bestLanguage","getBestMatchingLanguage","defaultLanguage","localizedStrings","_fallbackValues","defaultStrings","strings","_this4","console","log","getLanguage","getAvailableLanguages","_this5","_availableLanguages","formatString","str","_this6","_len","valuesForPlaceholders","_key","input","getString","ref","filter","textPart","map","matchedKey","slice","referenceValue","valueForPlaceholder","valueFromObjectPlaceholder","omitWarning","current","paths","Error","ex","message","getContent"],"sources":["D:/Work/vinogradnik/client/node_modules/localized-strings/lib/LocalizedStrings.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = require(\"./utils\");\n\nvar utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Simple module to localize the React interface using the same syntax\n * used in the ReactNativeLocalization module\n * (https://github.com/stefalda/ReactNativeLocalization)\n *\n * Originally developed by Stefano Falda (stefano.falda@gmail.com)\n *\n * It uses a call to the Navigator/Browser object to get the current interface language,\n * then display the correct language strings or the default language (the first\n * one if a match is not found).\n *\n * How to use:\n * Check the instructions at:\n * https://github.com/stefalda/localized-strings\n */\n\nvar placeholderReplaceRegex = /(\\{[\\d|\\w]+\\})/;\nvar placeholderReferenceRegex = /(\\$ref\\{[\\w|.]+\\})/;\n\nvar LocalizedStrings = function () {\n  /**\n   * Constructor used to provide the strings objects in various language and the optional callback to get\n   * the interface language\n   * @param {*} props - the strings object\n   * @param {Function} options.customLanguageInterface - the optional method to use to get the InterfaceLanguage\n   * @param {Boolean} options.pseudo - convert all strings to pseudo, helpful when implementing\n   * @param {Boolean} options.pseudoMultipleLanguages - add 40% to pseudo, helps with translations in the future\n   * @param {Boolean} options.logsEnabled - Enable/Disable console.log outputs (default=true)\n   */\n  function LocalizedStrings(props, options) {\n    _classCallCheck(this, LocalizedStrings);\n\n    // Compatibility fix with previous version\n    if (typeof options === \"function\") {\n      /* eslint-disable no-param-reassign */\n      options = { customLanguageInterface: options };\n      /* eslint-enable */\n    }\n    this._opts = _extends({}, {\n      customLanguageInterface: utils.getInterfaceLanguage,\n      pseudo: false,\n      pseudoMultipleLanguages: false,\n      logsEnabled: true\n    }, options);\n    this._interfaceLanguage = this._opts.customLanguageInterface();\n    this._language = this._interfaceLanguage;\n    this.setContent(props);\n  }\n\n  /**\n   * Set the strings objects based on the parameter passed in the constructor\n   * @param {*} props\n   */\n\n\n  _createClass(LocalizedStrings, [{\n    key: \"setContent\",\n    value: function setContent(props) {\n      var _this = this;\n\n      var _Object$keys = Object.keys(props),\n          _Object$keys2 = _slicedToArray(_Object$keys, 1),\n          defaultLang = _Object$keys2[0];\n\n      this._defaultLanguage = defaultLang;\n      this._defaultLanguageFirstLevelKeys = [];\n      // Store locally the passed strings\n      this._props = props;\n      utils.validateTranslationKeys(Object.keys(props[this._defaultLanguage]));\n      // Store first level keys (for identifying missing translations)\n      Object.keys(this._props[this._defaultLanguage]).forEach(function (key) {\n        if (typeof _this._props[_this._defaultLanguage][key] === \"string\") {\n          _this._defaultLanguageFirstLevelKeys.push(key);\n        }\n      });\n      // Set language to its default value (the interface)\n      this.setLanguage(this._interfaceLanguage);\n      // Developermode with pseudo\n      if (this._opts.pseudo) {\n        this._pseudoAllValues(this._props);\n      }\n    }\n\n    /**\n     * Replace all strings to pseudo value\n     * @param {Object} obj - Loopable object\n     */\n\n  }, {\n    key: \"_pseudoAllValues\",\n    value: function _pseudoAllValues(obj) {\n      var _this2 = this;\n\n      Object.keys(obj).forEach(function (property) {\n        if (_typeof(obj[property]) === \"object\") {\n          _this2._pseudoAllValues(obj[property]);\n        } else if (typeof obj[property] === \"string\") {\n          if (obj[property].indexOf(\"[\") === 0 && obj[property].lastIndexOf(\"]\") === obj[property].length - 1) {\n            // already psuedo fixed\n            return;\n          }\n          // @TODO must be a way to get regex to find all replaceble strings except our replacement variables\n          var strArr = obj[property].split(\" \");\n          for (var i = 0; i < strArr.length; i += 1) {\n            if (strArr[i].match(placeholderReplaceRegex)) {\n              // we want to keep this string, includes specials\n            } else if (strArr[i].match(placeholderReferenceRegex)) {\n              // we want to keep this string, includes specials\n            } else {\n              var len = strArr[i].length;\n              if (_this2._opts.pseudoMultipleLanguages) {\n                len = parseInt(len * 1.4, 10); // add length with 40%\n              }\n              strArr[i] = utils.randomPseudo(len);\n            }\n          }\n          obj[property] = \"[\" + strArr.join(\" \") + \"]\"; // eslint-disable-line no-param-reassign\n        }\n      });\n    }\n\n    /**\n     * Can be used from ouside the class to force a particular language\n     * indipendently from the interface one\n     * @param {*} language\n     */\n\n  }, {\n    key: \"setLanguage\",\n    value: function setLanguage(language) {\n      var _this3 = this;\n\n      // Check if exists a translation for the current language or if the default\n      // should be used\n      var bestLanguage = utils.getBestMatchingLanguage(language, this._props);\n      var defaultLanguage = Object.keys(this._props)[0];\n      this._language = bestLanguage;\n      // Associate the language object to the this object\n      if (this._props[bestLanguage]) {\n        // delete default propery values to identify missing translations\n        for (var i = 0; i < this._defaultLanguageFirstLevelKeys.length; i += 1) {\n          delete this[this._defaultLanguageFirstLevelKeys[i]];\n        }\n        var localizedStrings = _extends({}, this._props[this._language]);\n        Object.keys(localizedStrings).forEach(function (key) {\n          _this3[key] = localizedStrings[key];\n        });\n        // Now add any string missing from the translation but existing in the default language\n        if (defaultLanguage !== this._language) {\n          localizedStrings = this._props[defaultLanguage];\n          this._fallbackValues(localizedStrings, this);\n        }\n      }\n    }\n\n    /**\n     * Load fallback values for missing translations\n     * @param {*} defaultStrings\n     * @param {*} strings\n     */\n\n  }, {\n    key: \"_fallbackValues\",\n    value: function _fallbackValues(defaultStrings, strings) {\n      var _this4 = this;\n\n      Object.keys(defaultStrings).forEach(function (key) {\n        if (Object.prototype.hasOwnProperty.call(defaultStrings, key) && !strings[key] && strings[key] !== \"\") {\n          strings[key] = defaultStrings[key]; // eslint-disable-line no-param-reassign\n          if (_this4._opts.logsEnabled) {\n            console.log(\"\\uD83D\\uDEA7 \\uD83D\\uDC77 key '\" + key + \"' not found in localizedStrings for language \" + _this4._language + \" \\uD83D\\uDEA7\");\n          }\n        } else if (typeof strings[key] !== \"string\") {\n          // It's an object\n          _this4._fallbackValues(defaultStrings[key], strings[key]);\n        }\n      });\n    }\n\n    /**\n     * The current language displayed (could differ from the interface language\n     * if it has been forced manually and a matching translation has been found)\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      return this._language;\n    }\n\n    /**\n     * The current interface language (could differ from the language displayed)\n     */\n\n  }, {\n    key: \"getInterfaceLanguage\",\n    value: function getInterfaceLanguage() {\n      return this._interfaceLanguage;\n    }\n\n    /**\n     * Return an array containing the available languages passed as props in the constructor\n     */\n\n  }, {\n    key: \"getAvailableLanguages\",\n    value: function getAvailableLanguages() {\n      var _this5 = this;\n\n      if (!this._availableLanguages) {\n        this._availableLanguages = [];\n        Object.keys(this._props).forEach(function (key) {\n          _this5._availableLanguages.push(key);\n        });\n      }\n      return this._availableLanguages;\n    }\n\n    // Format the passed string replacing the numbered or tokenized placeholders\n    // eg. 1: I'd like some {0} and {1}, or just {0}\n    // eg. 2: I'd like some {bread} and {butter}, or just {bread}\n    // eg. 3: I'd like some $ref{bread} and $ref{butter}, or just $ref{bread}\n    // Use example:\n    // eg. 1: strings.formatString(strings.question, strings.bread, strings.butter)\n    // eg. 2: strings.formatString(strings.question, { bread: strings.bread, butter: strings.butter })\n    // eg. 3: strings.formatString(strings.question)\n\n  }, {\n    key: \"formatString\",\n    value: function formatString(str) {\n      var _this6 = this;\n\n      for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        valuesForPlaceholders[_key - 1] = arguments[_key];\n      }\n\n      var input = str || \"\";\n      if (typeof input === \"string\") {\n        input = this.getString(str, null, true) || input;\n      }\n      var ref = input.split(placeholderReferenceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReferenceRegex)) {\n          var matchedKey = textPart.slice(5, -1);\n          var referenceValue = _this6.getString(matchedKey);\n          if (referenceValue) return referenceValue;\n          if (_this6._opts.logsEnabled) {\n            console.log(\"No Localization ref found for '\" + textPart + \"' in string '\" + str + \"'\");\n          }\n          // lets print it another way so next replacer doesn't find it\n          return \"$ref(id:\" + matchedKey + \")\";\n        }\n        return textPart;\n      }).join(\"\");\n      return ref.split(placeholderReplaceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReplaceRegex)) {\n          var matchedKey = textPart.slice(1, -1);\n          var valueForPlaceholder = valuesForPlaceholders[matchedKey];\n          // If no value found, check if working with an object instead\n          if (valueForPlaceholder === undefined) {\n            var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];\n            if (valueFromObjectPlaceholder !== undefined) {\n              valueForPlaceholder = valueFromObjectPlaceholder;\n            } else {\n              // If value still isn't found, then it must have been undefined/null\n              return valueForPlaceholder;\n            }\n          }\n\n          return valueForPlaceholder;\n        }\n        return textPart;\n      }).join(\"\");\n    }\n\n    // Return a string with the passed key in a different language or defalt if not set\n    // We allow deep . notation for finding strings\n\n  }, {\n    key: \"getString\",\n    value: function getString(key, language) {\n      var omitWarning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      try {\n        var current = this._props[language || this._language];\n        var paths = key.split(\".\");\n        for (var i = 0; i < paths.length; i += 1) {\n          if (current[paths[i]] === undefined) {\n            throw Error(paths[i]);\n          }\n          current = current[paths[i]];\n        }\n        return current;\n      } catch (ex) {\n        if (!omitWarning && this._opts.logsEnabled) {\n          console.log(\"No localization found for key '\" + key + \"' and language '\" + language + \"', failed on \" + ex.message);\n        }\n      }\n      return null;\n    }\n\n    /**\n     * The current props (locale object)\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this._props;\n    }\n  }]);\n\n  return LocalizedStrings;\n}();\n\nexports.default = LocalizedStrings;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}