{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport jwtDecode from 'jwt-decode';\nimport { publicRequest, userRequest } from '../requestMethods';\nimport { logout } from './apiCalls';\n\n// export const refreshAccessToken = createAsyncThunk('auth/refreshAccessToken', async (refreshToken, refreshTokenId, { dispatch }) => {\n//     try {\n//         const res = await userRequest.post('auth/refresh_token', { refreshToken, refreshTokenId });\n//         console.log(res.data)\n//         return res.data\n//     } catch(err) {\n//         dispatch(logout());\n//         throw err;\n//     }\n// });\n\n// const refreshTokenMiddleware = ({ dispatch, getState }) => next => action => {\n//     next(action);\n//     const state = getState();\n//     const { accessToken, refreshToken } = state.user.currentUser;\n\n//     if (!accessToken || !refreshToken) {\n//         return;\n//     }\n\n//     const expirationTime = jwtDecode(accessToken).exp;\n\n//     if (Date.now() >= expirationTime * 1000) {\n//         dispatch(refreshAccessToken(refreshToken));\n//     }\n// }\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    currentUser: null,\n    isFetching: false,\n    error: false\n  },\n  reducers: {\n    loginStart: state => {\n      state.isFetching = true;\n      state.error = false;\n    },\n    loginSuccess: (state, action) => {\n      state.isFetching = false;\n      state.currentUser = action.payload;\n    },\n    loginFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    refreshTokenStart: state => {\n      state.isFetching = true;\n    },\n    refreshTokenSuccess: (state, action) => {\n      state.isFetching = false;\n      state.currentUser.accessToken = action.payload.accessToken;\n      state.currentUser.refreshToken = action.payload.refreshToken;\n    },\n    refreshTokenFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    logoutStart: state => {\n      state.isFetching = true;\n    },\n    logoutSuccess: state => {\n      state.isFetching = false;\n      state.currentUser = null;\n      state.error = false;\n    },\n    logoutFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    }\n  },\n  extraReducers: {\n    [refreshAccessToken.fulfilled]: (state, action) => {\n      state.currentUser.accessToken = action.payload.accessToken;\n      state.currentUser.refreshToken = action.payload.refreshToken;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  refreshTokenStart,\n  refreshTokenSuccess,\n  refreshTokenFailure,\n  logoutStart,\n  logoutSuccess,\n  logoutFailure\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","jwtDecode","publicRequest","userRequest","logout","userSlice","name","initialState","currentUser","isFetching","error","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","refreshTokenStart","refreshTokenSuccess","accessToken","refreshToken","refreshTokenFailure","logoutStart","logoutSuccess","logoutFailure","extraReducers","refreshAccessToken","fulfilled","actions","reducer"],"sources":["D:/Work/vinogradnik/client/src/redux/userRedux.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { publicRequest, userRequest } from '../requestMethods';\r\nimport { logout } from './apiCalls';\r\n\r\n\r\n// export const refreshAccessToken = createAsyncThunk('auth/refreshAccessToken', async (refreshToken, refreshTokenId, { dispatch }) => {\r\n//     try {\r\n//         const res = await userRequest.post('auth/refresh_token', { refreshToken, refreshTokenId });\r\n//         console.log(res.data)\r\n//         return res.data\r\n//     } catch(err) {\r\n//         dispatch(logout());\r\n//         throw err;\r\n//     }\r\n// });\r\n\r\n// const refreshTokenMiddleware = ({ dispatch, getState }) => next => action => {\r\n//     next(action);\r\n//     const state = getState();\r\n//     const { accessToken, refreshToken } = state.user.currentUser;\r\n\r\n//     if (!accessToken || !refreshToken) {\r\n//         return;\r\n//     }\r\n\r\n//     const expirationTime = jwtDecode(accessToken).exp;\r\n\r\n//     if (Date.now() >= expirationTime * 1000) {\r\n//         dispatch(refreshAccessToken(refreshToken));\r\n//     }\r\n// }\r\n\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        currentUser: null,\r\n        isFetching: false,\r\n        error: false\r\n    },\r\n    reducers: {\r\n        loginStart: (state) => {\r\n            state.isFetching = true\r\n            state.error = false\r\n        },\r\n        loginSuccess: (state, action) => {\r\n            state.isFetching = false;\r\n            state.currentUser = action.payload\r\n        },\r\n        loginFailure: (state) => {\r\n            state.isFetching = false;\r\n            state.error = true;\r\n        },\r\n        refreshTokenStart: (state) => {\r\n            state.isFetching = true\r\n        },\r\n        refreshTokenSuccess: (state, action) => {\r\n            state.isFetching = false;\r\n            state.currentUser.accessToken = action.payload.accessToken;\r\n            state.currentUser.refreshToken = action.payload.refreshToken;\r\n        },\r\n        refreshTokenFailure: (state) => {\r\n            state.isFetching = false;\r\n            state.error = true;\r\n        },\r\n        logoutStart: (state) => {\r\n            state.isFetching = true\r\n        },\r\n        logoutSuccess: (state) => {\r\n            state.isFetching = false;\r\n            state.currentUser = null;\r\n            state.error = false;\r\n        },\r\n        logoutFailure: (state) => {\r\n            state.isFetching = false;\r\n            state.error = true;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [refreshAccessToken.fulfilled]: (state, action) => {\r\n            state.currentUser.accessToken = action.payload.accessToken;\r\n            state.currentUser.refreshToken = action.payload.refreshToken;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { \r\n    loginStart, \r\n    loginSuccess, \r\n    loginFailure, \r\n    refreshTokenStart,\r\n    refreshTokenSuccess,\r\n    refreshTokenFailure,\r\n    logoutStart, \r\n    logoutSuccess, \r\n    logoutFailure \r\n} = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,aAAa,EAAEC,WAAW,QAAQ,mBAAmB;AAC9D,SAASC,MAAM,QAAQ,YAAY;;AAGnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC1BO,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,KAAK;IACjBC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACNC,UAAU,EAAGC,KAAK,IAAK;MACnBA,KAAK,CAACJ,UAAU,GAAG,IAAI;MACvBI,KAAK,CAACH,KAAK,GAAG,KAAK;IACvB,CAAC;IACDI,YAAY,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC7BF,KAAK,CAACJ,UAAU,GAAG,KAAK;MACxBI,KAAK,CAACL,WAAW,GAAGO,MAAM,CAACC,OAAO;IACtC,CAAC;IACDC,YAAY,EAAGJ,KAAK,IAAK;MACrBA,KAAK,CAACJ,UAAU,GAAG,KAAK;MACxBI,KAAK,CAACH,KAAK,GAAG,IAAI;IACtB,CAAC;IACDQ,iBAAiB,EAAGL,KAAK,IAAK;MAC1BA,KAAK,CAACJ,UAAU,GAAG,IAAI;IAC3B,CAAC;IACDU,mBAAmB,EAAE,CAACN,KAAK,EAAEE,MAAM,KAAK;MACpCF,KAAK,CAACJ,UAAU,GAAG,KAAK;MACxBI,KAAK,CAACL,WAAW,CAACY,WAAW,GAAGL,MAAM,CAACC,OAAO,CAACI,WAAW;MAC1DP,KAAK,CAACL,WAAW,CAACa,YAAY,GAAGN,MAAM,CAACC,OAAO,CAACK,YAAY;IAChE,CAAC;IACDC,mBAAmB,EAAGT,KAAK,IAAK;MAC5BA,KAAK,CAACJ,UAAU,GAAG,KAAK;MACxBI,KAAK,CAACH,KAAK,GAAG,IAAI;IACtB,CAAC;IACDa,WAAW,EAAGV,KAAK,IAAK;MACpBA,KAAK,CAACJ,UAAU,GAAG,IAAI;IAC3B,CAAC;IACDe,aAAa,EAAGX,KAAK,IAAK;MACtBA,KAAK,CAACJ,UAAU,GAAG,KAAK;MACxBI,KAAK,CAACL,WAAW,GAAG,IAAI;MACxBK,KAAK,CAACH,KAAK,GAAG,KAAK;IACvB,CAAC;IACDe,aAAa,EAAGZ,KAAK,IAAK;MACtBA,KAAK,CAACJ,UAAU,GAAG,KAAK;MACxBI,KAAK,CAACH,KAAK,GAAG,IAAI;IACtB;EACJ,CAAC;EACDgB,aAAa,EAAE;IACX,CAACC,kBAAkB,CAACC,SAAS,GAAG,CAACf,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACL,WAAW,CAACY,WAAW,GAAGL,MAAM,CAACC,OAAO,CAACI,WAAW;MAC1DP,KAAK,CAACL,WAAW,CAACa,YAAY,GAAGN,MAAM,CAACC,OAAO,CAACK,YAAY;IAChE;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EACTT,UAAU;EACVE,YAAY;EACZG,YAAY;EACZC,iBAAiB;EACjBC,mBAAmB;EACnBG,mBAAmB;EACnBC,WAAW;EACXC,aAAa;EACbC;AACJ,CAAC,GAAGpB,SAAS,CAACwB,OAAO;AACrB,eAAexB,SAAS,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}