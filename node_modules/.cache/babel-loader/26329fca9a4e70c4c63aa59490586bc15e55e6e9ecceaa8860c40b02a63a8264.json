{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport jwtDecode from 'jwt-decode';\nimport { publicRequest } from '../requestMethods';\nimport { logout } from './apiCalls';\nexport const refreshAccessToken = createAsyncThunk('auth/refreshAccessToken', async (refreshToken, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n  try {\n    const res = await publicRequest.post('auth/refresh_token', {\n      refreshToken\n    });\n    return res.data;\n  } catch (err) {\n    dispatch(logout());\n    throw err;\n  }\n});\nconst refreshTokenMiddleware = _ref2 => {\n  let {\n    dispatch,\n    getState\n  } = _ref2;\n  return next => action => {\n    next(action);\n    const state = getState();\n    const {\n      accessToken,\n      refreshToken\n    } = state.user.currentUser;\n    if (!accessToken || !refreshToken) {\n      return;\n    }\n    const expirationTime = jwtDecode(accessToken).exp;\n    if (Date.now() >= expirationTime * 1000) {\n      dispatch(refreshAccessToken(refreshToken));\n    }\n  };\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    currentUser: null,\n    isFetching: false,\n    error: false\n  },\n  reducers: {\n    loginStart: state => {\n      state.isFetching = true;\n      state.error = false;\n    },\n    loginSuccess: (state, action) => {\n      state.isFetching = false;\n      state.currentUser = action.payload;\n    },\n    loginFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    // refreshTokenStart: (state) => {\n    //     state.isFetching = true\n    // },\n    // refreshTokenSuccess: (state, action) => {\n    //     state.isFetching = false;\n    //     state.currentUser.accessToken = action.payload.accessToken;\n    //     state.currentUser.refreshToken = action.payload.refreshToken;\n    // },\n    // refreshTokenFailure: (state) => {\n    //     state.isFetching = false;\n    //     state.error = true;\n    // },\n    logoutStart: state => {\n      state.isFetching = true;\n    },\n    logoutSuccess: state => {\n      state.isFetching = false;\n      state.currentUser = null;\n      state.error = false;\n    },\n    logoutFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    }\n  },\n  extraReducers: {\n    [refreshAccessToken.fulfilled]: (state, action) => {\n      state.currentUser.accessToken = action.payload.accessToken;\n      state.currentUser.refreshToken = action.payload.refreshToken;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  refreshTokenStart,\n  refreshTokenSuccess,\n  refreshTokenFailure,\n  logoutStart,\n  logoutSuccess,\n  logoutFailure\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","jwtDecode","publicRequest","logout","refreshAccessToken","refreshToken","dispatch","res","post","data","err","refreshTokenMiddleware","getState","next","action","state","accessToken","user","currentUser","expirationTime","exp","Date","now","userSlice","name","initialState","isFetching","error","reducers","loginStart","loginSuccess","payload","loginFailure","logoutStart","logoutSuccess","logoutFailure","extraReducers","fulfilled","refreshTokenStart","refreshTokenSuccess","refreshTokenFailure","actions","reducer"],"sources":["D:/Work/vinogradnik/client/src/redux/userRedux.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { publicRequest } from '../requestMethods';\r\nimport { logout } from './apiCalls';\r\n\r\n\r\nexport const refreshAccessToken = createAsyncThunk('auth/refreshAccessToken', async (refreshToken, { dispatch }) => {\r\n    try {\r\n        const res = await publicRequest.post('auth/refresh_token', { refreshToken });\r\n        return res.data\r\n    } catch(err) {\r\n        dispatch(logout());\r\n        throw err;\r\n    }\r\n});\r\n\r\nconst refreshTokenMiddleware = ({ dispatch, getState }) => next => action => {\r\n    next(action);\r\n    const state = getState();\r\n    const { accessToken, refreshToken } = state.user.currentUser;\r\n\r\n    if (!accessToken || !refreshToken) {\r\n        return;\r\n    }\r\n\r\n    const expirationTime = jwtDecode(accessToken).exp;\r\n\r\n    if (Date.now() >= expirationTime * 1000) {\r\n        dispatch(refreshAccessToken(refreshToken));\r\n    }\r\n}\r\n\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        currentUser: null,\r\n        isFetching: false,\r\n        error: false\r\n    },\r\n    reducers: {\r\n        loginStart: (state) => {\r\n            state.isFetching = true\r\n            state.error = false\r\n        },\r\n        loginSuccess: (state, action) => {\r\n            state.isFetching = false;\r\n            state.currentUser = action.payload\r\n        },\r\n        loginFailure: (state) => {\r\n            state.isFetching = false;\r\n            state.error = true;\r\n        },\r\n        // refreshTokenStart: (state) => {\r\n        //     state.isFetching = true\r\n        // },\r\n        // refreshTokenSuccess: (state, action) => {\r\n        //     state.isFetching = false;\r\n        //     state.currentUser.accessToken = action.payload.accessToken;\r\n        //     state.currentUser.refreshToken = action.payload.refreshToken;\r\n        // },\r\n        // refreshTokenFailure: (state) => {\r\n        //     state.isFetching = false;\r\n        //     state.error = true;\r\n        // },\r\n        logoutStart: (state) => {\r\n            state.isFetching = true\r\n        },\r\n        logoutSuccess: (state) => {\r\n            state.isFetching = false;\r\n            state.currentUser = null;\r\n            state.error = false;\r\n        },\r\n        logoutFailure: (state) => {\r\n            state.isFetching = false;\r\n            state.error = true;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [refreshAccessToken.fulfilled]: (state, action) => {\r\n            state.currentUser.accessToken = action.payload.accessToken;\r\n            state.currentUser.refreshToken = action.payload.refreshToken;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { \r\n    loginStart, \r\n    loginSuccess, \r\n    loginFailure, \r\n    refreshTokenStart,\r\n    refreshTokenSuccess,\r\n    refreshTokenFailure,\r\n    logoutStart, \r\n    logoutSuccess, \r\n    logoutFailure \r\n} = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}