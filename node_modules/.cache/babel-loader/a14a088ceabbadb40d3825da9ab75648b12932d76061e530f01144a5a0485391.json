{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { userRequest } from \"../requestMethods\";\n\n// export const fetchCart = createAsyncThunk('cart/fetchCart', async (userId) => {\n\n//     try {\n//         const res = await userRequest.get(`carts/find/${userId}`, {\n//             withCredentials: true\n//         });\n//         return res.data;\n//     } catch (err) {\n//         console.log(err)\n//     }\n// });\n\nexport const saveNewCart = createAsyncThunk('cart/saveNewCart', async cart => {\n  const newCart = {\n    cart\n  };\n  try {\n    const res = await userRequest.put(`/${cart.id}`, {\n      cart: newCart,\n      withCredentials: true\n    });\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  }\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    products: [],\n    quantity: 0,\n    totalPrice: 0,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    addProduct: (state, action) => {\n      var _state$products;\n      if (((_state$products = state.products) === null || _state$products === void 0 ? void 0 : _state$products.length) > 0) {\n        for (let i = 0; i < state.products.length; i++) {\n          if (state.products[i]['_id'] === action.payload._id && state.products[i]['color'] === action.payload.color) {\n            state.products[i].quantity += action.payload.quantity;\n            state.totalPrice += action.payload.price * action.payload.quantity;\n            return;\n          }\n        }\n        state.quantity += 1;\n        state.products.push(action.payload);\n        state.totalPrice += action.payload.price * action.payload.quantity;\n      } else {\n        state.quantity += 1;\n        state.products.push(action.payload);\n        state.totalPrice += action.payload.price * action.payload.quantity;\n      }\n    },\n    increaseProduct: (state, action) => {\n      if (state.products.length > 0) {\n        for (let i = 0; i < state.products.length; i++) {\n          if (state.products[i]['_id'] === action.payload._id && state.products[i]['color'] === action.payload.color) {\n            if (state.products[i].quantity < 10000) {\n              state.products[i].quantity += 100;\n              state.totalPrice += action.payload.price * 100;\n            }\n            return;\n          }\n        }\n      }\n    },\n    decreaseProduct: (state, action) => {\n      if (state.products.length > 0) {\n        for (let i = 0; i < state.products.length; i++) {\n          if (state.products[i]['_id'] === action.payload._id && state.products[i]['color'] === action.payload.color) {\n            if (state.products[i].quantity > 100) {\n              state.products[i].quantity -= 100;\n              state.totalPrice -= action.payload.price * 100;\n            }\n            return;\n          }\n        }\n      }\n    },\n    deleteProduct: (state, action) => {\n      console.log(state);\n      if (state.products.length > 0) {\n        for (let i = 0; i < state.products.length; i++) {\n          if (state.products[i]['_id'] === action.payload._id && state.products[i]['color'] === action.payload.color) {\n            state.totalPrice -= state.products[i].price * state.products[i].quantity;\n            state.products.splice(i, 1);\n            state.quantity -= 1;\n            return;\n          }\n        }\n      }\n    },\n    clearCart: state => {\n      state.products = [];\n      state.quantity = 0;\n      state.totalPrice = 0;\n      state.status = 'idle';\n      state.error = null;\n      state.id = null;\n      state.createdAt = null;\n      state.updatedAt = null;\n    }\n  }\n  // extraReducers(builder) {\n  //     builder\n  //         .addCase(fetchCart.pending, (state) => {\n  //             state.status = 'loading';\n  //         })\n  //         .addCase(fetchCart.fulfilled, (state, action) => {\n  //             state.status = 'succeded';\n  //             state.id = action.payload?._id || null;\n  //             state.createdAt = action.payload?.createdAt || null;\n  //             state.updatedAt = action.payload?.updatedAt || null;\n  //             state.products = action.payload?.products || [];\n  //             state.quantity = state.products?.length || 0;\n  //             state.totalPrice = state.products?.reduce((next, product) => next + product['price']*product['quantity'], 0) || 0;\n  //         })\n  //         .addCase(fetchCart.rejected, (state, action) => {\n  //             state.status = 'failed';\n  //             state.error = action.error.message;\n  //         })\n  //         .addCase(saveNewCart.fulfilled, (state, action) => {\n  //             state.status = 'succeded';\n  //             state.id = action.payload?._id || null;\n  //             state.createdAt = action.payload?.createdAt || null;\n  //             state.updatedAt = action.payload?.updatedAt || null;\n  //             state.products = action.payload?.products || [];\n  //             state.quantity = state.products?.length || 0;\n  //             state.totalPrice = state.products?.reduce((next, product) => next + product['price']*product['quantity'], 0) || 0;\n  //         })\n  // },\n});\n\nexport const {\n  addProduct,\n  increaseProduct,\n  decreaseProduct,\n  deleteProduct,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","userRequest","saveNewCart","cart","newCart","res","put","id","withCredentials","data","err","console","log","cartSlice","name","initialState","products","quantity","totalPrice","status","error","reducers","addProduct","state","action","length","i","payload","_id","color","price","push","increaseProduct","decreaseProduct","deleteProduct","splice","clearCart","createdAt","updatedAt","actions","reducer"],"sources":["D:/Work/vinogradnik/client/src/redux/cartRedux.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { userRequest } from \"../requestMethods\";\r\n\r\n\r\n// export const fetchCart = createAsyncThunk('cart/fetchCart', async (userId) => {\r\n\r\n//     try {\r\n//         const res = await userRequest.get(`carts/find/${userId}`, {\r\n//             withCredentials: true\r\n//         });\r\n//         return res.data;\r\n//     } catch (err) {\r\n//         console.log(err)\r\n//     }\r\n// });\r\n\r\nexport const saveNewCart = createAsyncThunk('cart/saveNewCart', async cart => {\r\n    const newCart = { cart }\r\n    try {\r\n        const res = await userRequest.put(`/${cart.id}`, { \r\n            cart: newCart,\r\n            withCredentials: true\r\n        });\r\n        return res.data\r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n})\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        products: [],\r\n        quantity: 0,\r\n        totalPrice: 0,\r\n        status: 'idle',\r\n        error: null     \r\n    },\r\n    reducers: {\r\n        addProduct: (state, action) => {\r\n            if (state.products?.length > 0) {\r\n                for (let i = 0; i < state.products.length; i++) {\r\n                    if (state.products[i]['_id'] === action.payload._id && state.products[i]['color'] === action.payload.color) {\r\n                        state.products[i].quantity += action.payload.quantity;\r\n                        state.totalPrice += action.payload.price * action.payload.quantity;\r\n                        return\r\n                    } \r\n                }\r\n                state.quantity += 1;\r\n                state.products.push(action.payload);\r\n                state.totalPrice += action.payload.price * action.payload.quantity;               \r\n            } else {\r\n                state.quantity += 1;\r\n                state.products.push(action.payload);\r\n                state.totalPrice += action.payload.price * action.payload.quantity;\r\n            }\r\n        },\r\n        increaseProduct: (state, action) => {\r\n            if (state.products.length > 0) {\r\n                for (let i = 0; i < state.products.length; i++) {\r\n                    if (state.products[i]['_id'] === action.payload._id && state.products[i]['color'] === action.payload.color) {\r\n                        if (state.products[i].quantity < 10000) {\r\n                            state.products[i].quantity += 100;\r\n                            state.totalPrice += action.payload.price * 100;\r\n                        }\r\n                        return                        \r\n                    }\r\n                }\r\n            }\r\n        },\r\n        decreaseProduct: (state, action) => {\r\n            if (state.products.length > 0) {\r\n                for (let i = 0; i < state.products.length; i++) {\r\n                    if (state.products[i]['_id'] === action.payload._id && state.products[i]['color'] === action.payload.color) {\r\n                        if (state.products[i].quantity > 100) {\r\n                            state.products[i].quantity -= 100;\r\n                            state.totalPrice -= action.payload.price * 100;\r\n                        }\r\n                        return                        \r\n                    }\r\n                }\r\n            }\r\n        },\r\n        deleteProduct: (state, action) => {\r\n            console.log(state)\r\n            if (state.products.length > 0) {\r\n                for (let i = 0; i < state.products.length; i++) {\r\n                    if (state.products[i]['_id'] === action.payload._id && state.products[i]['color'] === action.payload.color) {\r\n                        state.totalPrice -= state.products[i].price*state.products[i].quantity;\r\n                        state.products.splice(i, 1);\r\n                        state.quantity -= 1;    \r\n                        return\r\n                    } \r\n                }        \r\n            }\r\n        },\r\n        clearCart: (state) => {\r\n            state.products = [];\r\n            state.quantity = 0;\r\n            state.totalPrice = 0;\r\n            state.status = 'idle';\r\n            state.error = null;\r\n            state.id = null;\r\n            state.createdAt = null;\r\n            state.updatedAt = null;\r\n        },\r\n    },\r\n    // extraReducers(builder) {\r\n    //     builder\r\n    //         .addCase(fetchCart.pending, (state) => {\r\n    //             state.status = 'loading';\r\n    //         })\r\n    //         .addCase(fetchCart.fulfilled, (state, action) => {\r\n    //             state.status = 'succeded';\r\n    //             state.id = action.payload?._id || null;\r\n    //             state.createdAt = action.payload?.createdAt || null;\r\n    //             state.updatedAt = action.payload?.updatedAt || null;\r\n    //             state.products = action.payload?.products || [];\r\n    //             state.quantity = state.products?.length || 0;\r\n    //             state.totalPrice = state.products?.reduce((next, product) => next + product['price']*product['quantity'], 0) || 0;\r\n    //         })\r\n    //         .addCase(fetchCart.rejected, (state, action) => {\r\n    //             state.status = 'failed';\r\n    //             state.error = action.error.message;\r\n    //         })\r\n    //         .addCase(saveNewCart.fulfilled, (state, action) => {\r\n    //             state.status = 'succeded';\r\n    //             state.id = action.payload?._id || null;\r\n    //             state.createdAt = action.payload?.createdAt || null;\r\n    //             state.updatedAt = action.payload?.updatedAt || null;\r\n    //             state.products = action.payload?.products || [];\r\n    //             state.quantity = state.products?.length || 0;\r\n    //             state.totalPrice = state.products?.reduce((next, product) => next + product['price']*product['quantity'], 0) || 0;\r\n    //         })\r\n    // },\r\n});\r\n\r\nexport const { addProduct, increaseProduct, decreaseProduct, deleteProduct, clearCart } = cartSlice.actions;\r\nexport default cartSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}