{"ast":null,"code":"var _localStorage;\nimport axios from 'axios';\nconst BASE_URL = 'http://localhost:5000/api/';\nlet TOKEN;\nif (!((_localStorage = localStorage) !== null && _localStorage !== void 0 && _localStorage.getItem(\"persist:root\"))) {\n  TOKEN = {};\n} else {\n  var _JSON$parse, _JSON$parse$currentUs, _JSON$parse2, _localStorage2;\n  TOKEN = (_JSON$parse = JSON.parse((_JSON$parse2 = JSON.parse((_localStorage2 = localStorage) === null || _localStorage2 === void 0 ? void 0 : _localStorage2.getItem(\"persist:root\"))) === null || _JSON$parse2 === void 0 ? void 0 : _JSON$parse2.user)) === null || _JSON$parse === void 0 ? void 0 : (_JSON$parse$currentUs = _JSON$parse.currentUser) === null || _JSON$parse$currentUs === void 0 ? void 0 : _JSON$parse$currentUs.accessToken;\n}\nconsole.log(TOKEN);\nexport const publicRequest = axios.create({\n  baseURL: BASE_URL\n});\nconst userRequest = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    token: `Bearer ${TOKEN}`\n  }\n});\ninstance.interceptors.request.use(config => {\n  const token = TokenService.getLocalAccessToken();\n  if (token) {\n    config.headers[\"x-access-token\"] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(res => {\n  return res;\n}, async err => {\n  const originalConfig = err.config;\n  if (originalConfig.url !== \"/auth/login\" && err.response) {\n    if (err.response.status === 401 && !originalConfig._retry) {\n      originalConfig._retry = true;\n      try {\n        const rs = await instance.post(\"/auth/refreshtoken\", {\n          refreshToken: TokenService.getLocalRefreshToken()\n        });\n        const {\n          accessToken\n        } = rs.data;\n        TokenService.updateLocalAccessToken(accessToken);\n        return instance(originalConfig);\n      } catch (_error) {\n        return Promise.reject(_error);\n      }\n    }\n  }\n  return Promise.reject(err);\n});","map":{"version":3,"names":["axios","BASE_URL","TOKEN","localStorage","getItem","JSON","parse","user","currentUser","accessToken","console","log","publicRequest","create","baseURL","userRequest","headers","token","instance","interceptors","request","use","config","TokenService","getLocalAccessToken","error","Promise","reject","response","res","err","originalConfig","url","status","_retry","rs","post","refreshToken","getLocalRefreshToken","data","updateLocalAccessToken","_error"],"sources":["D:/Work/vinogradnik/client/src/requestMethods.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n\r\nconst BASE_URL = 'http://localhost:5000/api/';\r\n\r\nlet TOKEN\r\nif (!localStorage?.getItem(\"persist:root\")) {\r\n    TOKEN = {}\r\n} else {\r\n    TOKEN = JSON.parse(JSON.parse(localStorage?.getItem(\"persist:root\"))?.user)?.currentUser?.accessToken;\r\n}\r\nconsole.log(TOKEN)\r\n\r\nexport const publicRequest = axios.create({\r\n    baseURL: BASE_URL\r\n});\r\n\r\nconst userRequest = axios.create({\r\n    baseURL: BASE_URL,\r\n    headers: {token: `Bearer ${TOKEN}`},\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n    (config) => {\r\n        const token = TokenService.getLocalAccessToken();\r\n        if (token) {\r\n            config.headers[\"x-access-token\"] = token;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\ninstance.interceptors.response.use(\r\n    (res) => {\r\n        return res;\r\n    },\r\n    async (err) => {\r\n        const originalConfig = err.config;\r\n\r\n        if (originalConfig.url !== \"/auth/login\" && err.response) {\r\n            if (err.response.status === 401 && !originalConfig._retry) {\r\n                originalConfig._retry = true;\r\n\r\n                try {\r\n                    const rs = await instance.post(\"/auth/refreshtoken\", {\r\n                        refreshToken: TokenService.getLocalRefreshToken(),\r\n                    });\r\n\r\n                    const { accessToken } = rs.data;\r\n                    TokenService.updateLocalAccessToken(accessToken);\r\n\r\n                    return instance(originalConfig);\r\n                } catch (_error) {\r\n                    return Promise.reject(_error);\r\n                }\r\n            }\r\n        }\r\n        return Promise.reject(err);\r\n    }\r\n);"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,QAAQ,GAAG,4BAA4B;AAE7C,IAAIC,KAAK;AACT,IAAI,mBAACC,YAAY,0CAAZ,cAAcC,OAAO,CAAC,cAAc,CAAC,GAAE;EACxCF,KAAK,GAAG,CAAC,CAAC;AACd,CAAC,MAAM;EAAA;EACHA,KAAK,kBAAGG,IAAI,CAACC,KAAK,iBAACD,IAAI,CAACC,KAAK,mBAACH,YAAY,mDAAZ,eAAcC,OAAO,CAAC,cAAc,CAAC,CAAC,iDAAjD,aAAmDG,IAAI,CAAC,yEAAnE,YAAqEC,WAAW,0DAAhF,sBAAkFC,WAAW;AACzG;AACAC,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC;AAElB,OAAO,MAAMU,aAAa,GAAGZ,KAAK,CAACa,MAAM,CAAC;EACtCC,OAAO,EAAEb;AACb,CAAC,CAAC;AAEF,MAAMc,WAAW,GAAGf,KAAK,CAACa,MAAM,CAAC;EAC7BC,OAAO,EAAEb,QAAQ;EACjBe,OAAO,EAAE;IAACC,KAAK,EAAG,UAASf,KAAM;EAAC;AACtC,CAAC,CAAC;AAEFgB,QAAQ,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAK;EACR,MAAML,KAAK,GAAGM,YAAY,CAACC,mBAAmB,EAAE;EAChD,IAAIP,KAAK,EAAE;IACPK,MAAM,CAACN,OAAO,CAAC,gBAAgB,CAAC,GAAGC,KAAK;EAC5C;EACA,OAAOK,MAAM;AACjB,CAAC,EACAG,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CACJ;AAEDP,QAAQ,CAACC,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC7BQ,GAAG,IAAK;EACL,OAAOA,GAAG;AACd,CAAC,EACD,MAAOC,GAAG,IAAK;EACX,MAAMC,cAAc,GAAGD,GAAG,CAACR,MAAM;EAEjC,IAAIS,cAAc,CAACC,GAAG,KAAK,aAAa,IAAIF,GAAG,CAACF,QAAQ,EAAE;IACtD,IAAIE,GAAG,CAACF,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAI,CAACF,cAAc,CAACG,MAAM,EAAE;MACvDH,cAAc,CAACG,MAAM,GAAG,IAAI;MAE5B,IAAI;QACA,MAAMC,EAAE,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,oBAAoB,EAAE;UACjDC,YAAY,EAAEd,YAAY,CAACe,oBAAoB;QACnD,CAAC,CAAC;QAEF,MAAM;UAAE7B;QAAY,CAAC,GAAG0B,EAAE,CAACI,IAAI;QAC/BhB,YAAY,CAACiB,sBAAsB,CAAC/B,WAAW,CAAC;QAEhD,OAAOS,QAAQ,CAACa,cAAc,CAAC;MACnC,CAAC,CAAC,OAAOU,MAAM,EAAE;QACb,OAAOf,OAAO,CAACC,MAAM,CAACc,MAAM,CAAC;MACjC;IACJ;EACJ;EACA,OAAOf,OAAO,CAACC,MAAM,CAACG,GAAG,CAAC;AAC9B,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}