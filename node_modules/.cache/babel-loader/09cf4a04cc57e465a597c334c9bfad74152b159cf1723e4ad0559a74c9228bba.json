{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\n// const TOKEN = JSON.parse(JSON.parse(localStorage?.getItem(\"persist:root\"))?.user)?.currentUser?.accessToken;\nconst TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzYTg1MDUzMjU3NTljNDI4ZmIwNzExNyIsImlzQWRtaW4iOnRydWUsImlhdCI6MTY3NDY3NzQ2OCwiZXhwIjoxNjc0Njc5MjY4fQ.xQuYg6G3jGYWuz4D9Ev54INQ0lAeaHw9YWhH6atdh64\";\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:5000/api/',\n    prepareHeaders: headers => {\n      if (TOKEN) {\n        headers.set('token', `Bearer ${TOKEN}`);\n      }\n      ;\n      return headers;\n    }\n  }),\n  endpoints: builder => ({\n    getCart: builder.query({\n      query: userId => `carts/find/${userId}`\n    }),\n    createCart: builder.mutation({\n      query: newCart => ({\n        url: 'carts',\n        method: 'POST',\n        body: newCart\n      })\n    }),\n    updateCart: builder.mutation({\n      query: updatedCart => ({\n        url: `carts/${updatedCart.id}`,\n        method: 'PUT',\n        body: updatedCart\n      })\n    })\n  })\n});\nexport const {\n  useGetCartQuery,\n  useCreateCartMutation,\n  useUpdateCartMutation\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","TOKEN","apiSlice","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","set","endpoints","builder","getCart","query","userId","createCart","mutation","newCart","url","method","body","updateCart","updatedCart","id","useGetCartQuery","useCreateCartMutation","useUpdateCartMutation"],"sources":["D:/Work/vinogradnik/client/src/redux/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\n\r\n// const TOKEN = JSON.parse(JSON.parse(localStorage?.getItem(\"persist:root\"))?.user)?.currentUser?.accessToken;\r\nconst TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzYTg1MDUzMjU3NTljNDI4ZmIwNzExNyIsImlzQWRtaW4iOnRydWUsImlhdCI6MTY3NDY3NzQ2OCwiZXhwIjoxNjc0Njc5MjY4fQ.xQuYg6G3jGYWuz4D9Ev54INQ0lAeaHw9YWhH6atdh64\"\r\nexport const apiSlice = createApi({\r\n    reducerPath: 'api',\r\n    baseQuery: fetchBaseQuery({ \r\n        baseUrl: 'http://localhost:5000/api/',\r\n        prepareHeaders: (headers) => {\r\n            if (TOKEN) {\r\n                headers.set('token', `Bearer ${TOKEN}`)\r\n            };\r\n            return headers\r\n        },\r\n    }),\r\n    endpoints: builder => ({\r\n        getCart: builder.query({\r\n            query: (userId) => `carts/find/${userId}`\r\n        }),\r\n        createCart: builder.mutation({\r\n            query: (newCart) => ({\r\n                url: 'carts',\r\n                method: 'POST',\r\n                body: newCart               \r\n            })\r\n        }),\r\n        updateCart: builder.mutation({\r\n            query: (updatedCart) => ({\r\n                url: `carts/${updatedCart.id}`,\r\n                method: 'PUT',\r\n                body: updatedCart\r\n            })\r\n        })\r\n    })\r\n});\r\n\r\nexport const { \r\n    useGetCartQuery,\r\n    useCreateCartMutation,\r\n    useUpdateCartMutation\r\n} = apiSlice;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;;AAGxE;AACA,MAAMC,KAAK,GAAG,iMAAiM;AAC/M,OAAO,MAAMC,QAAQ,GAAGH,SAAS,CAAC;EAC9BI,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAEJ,cAAc,CAAC;IACtBK,OAAO,EAAE,4BAA4B;IACrCC,cAAc,EAAGC,OAAO,IAAK;MACzB,IAAIN,KAAK,EAAE;QACPM,OAAO,CAACC,GAAG,CAAC,OAAO,EAAG,UAASP,KAAM,EAAC,CAAC;MAC3C;MAAC;MACD,OAAOM,OAAO;IAClB;EACJ,CAAC,CAAC;EACFE,SAAS,EAAEC,OAAO,KAAK;IACnBC,OAAO,EAAED,OAAO,CAACE,KAAK,CAAC;MACnBA,KAAK,EAAGC,MAAM,IAAM,cAAaA,MAAO;IAC5C,CAAC,CAAC;IACFC,UAAU,EAAEJ,OAAO,CAACK,QAAQ,CAAC;MACzBH,KAAK,EAAGI,OAAO,KAAM;QACjBC,GAAG,EAAE,OAAO;QACZC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACV,CAAC;IACL,CAAC,CAAC;IACFI,UAAU,EAAEV,OAAO,CAACK,QAAQ,CAAC;MACzBH,KAAK,EAAGS,WAAW,KAAM;QACrBJ,GAAG,EAAG,SAAQI,WAAW,CAACC,EAAG,EAAC;QAC9BJ,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEE;MACV,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTE,eAAe;EACfC,qBAAqB;EACrBC;AACJ,CAAC,GAAGvB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}